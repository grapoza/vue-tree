import{j as e,M as d}from"./DocsRenderer-CFRXHY34-CcmJFkBN.js";import{useMDXComponents as s}from"./index-DcLjd9o3.js";import"./index-M4eRVXft.js";import"./iframe-BOCJkQ4X.js";import"./index-DZVNkkTA.js";import"./index-DrFu-skq.js";import"./preview-DbX92Fw5.js";function n(l){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...s(),...l.components};return e.jsxs(e.Fragment,{children:[e.jsx(d,{title:"@grapoza vue-tree/Home"}),`
`,e.jsx("style",{children:`
`}),`
`,e.jsx(t.h1,{id:"grapozavue-tree",children:"@grapoza/vue-tree"}),`
`,e.jsxs(t.p,{children:[e.jsx(t.a,{href:"https://opensource.org/licenses/MIT",rel:"nofollow",children:e.jsx(t.img,{src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"})}),`\r
`,e.jsx(t.a,{href:"https://ci.appveyor.com/project/Gregg/vue-tree/branch/master",rel:"nofollow",children:e.jsx(t.img,{src:"https://ci.appveyor.com/api/projects/status/j8d19gt0vh16amhh/branch/master?svg=true",alt:"Build status"})}),`\r
`,e.jsx(t.a,{href:"https://github.com/grapoza/vue-tree",rel:"nofollow",children:e.jsx(t.img,{src:"https://img.shields.io/badge/Source-View_on_GithHub-blue?svg=true",alt:"Source"})})]}),`
`,e.jsx(t.p,{children:"vue-tree is a Vue component that implements a Tree View control. Its aim is to provide common tree options in a way that is easy to use and easy to customize."}),`
`,e.jsxs(t.blockquote,{children:[`
`,e.jsxs(t.p,{children:["⚠️",e.jsxs(t.strong,{children:["From version 4.0.0 this component only works with Vue 3 and up. For Vue 2 support, use ",e.jsx(t.a,{href:"https://grapoza.github.io/vue-tree/3.0.4/",rel:"nofollow",children:"version 3.x"}),"."]})]}),`
`]}),`
`,e.jsx(t.p,{children:"Features include:"}),`
`,e.jsxs(t.ul,{children:[`
`,e.jsx(t.li,{children:"Expandable nodes"}),`
`,e.jsx(t.li,{children:"Checkboxes"}),`
`,e.jsx(t.li,{children:"Radio buttons"}),`
`,e.jsx(t.li,{children:"Node selection"}),`
`,e.jsx(t.li,{children:"Addition and removal of nodes"}),`
`,e.jsx(t.li,{children:"Slots for node content"}),`
`,e.jsx(t.li,{children:"Skinning"}),`
`,e.jsx(t.li,{children:"Asynchronous loading of nodes"}),`
`,e.jsx(t.li,{children:"Follows ARIA guidelines for treeview accessibility"}),`
`,e.jsx(t.li,{children:"Drag and drop (single nodes, works between trees)"}),`
`,e.jsx(t.li,{children:"Filtering"}),`
`]}),`
`,e.jsxs(t.p,{children:["For future plans, see the project's ",e.jsx(t.a,{href:"https://github.com/grapoza/vue-tree/issues",rel:"nofollow",children:"Issues"})," page."]}),`
`,e.jsx(t.h2,{id:"installation",children:"Installation"}),`
`,e.jsx(t.p,{children:"Install the component with your favorite package manager:"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-shell",children:`yarn add @grapoza/vue-tree
`})}),`
`,e.jsx(t.p,{children:"or"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-shell",children:`npm install --save @grapoza/vue-tree
`})}),`
`,e.jsx(t.p,{children:"or"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-shell",children:`bun add @grapoza/vue-tree
`})}),`
`,e.jsx(t.h2,{id:"usage",children:"Usage"}),`
`,e.jsx(t.p,{children:"If you're using it in a .vue file:"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-html",children:`<template>\r
  <TreeView  id="my-tree" v-model="dataModel" />\r
</template>\r
\r
// Options API\r
<script>\r
import { TreeView } from "@grapoza/vue-tree"\r
\r
export default {\r
  components: {\r
    TreeView\r
  },\r
  data() {\r
    return {\r
      dataModel: [\r
        {\r
          id: "numberOrString",\r
          label: "Root Node",\r
          children: [\r
            {id: 1, label: "Child Node"},\r
            {id: "node2", label: "Second Child"}\r
          ]\r
        }\r
      ]\r
    }\r
  }\r
}\r
<\/script>\r
\r
// Composition API\r
<script setup>\r
import { TreeView } from "@grapoza/vue-tree"\r
const dataModel = ref([\r
  {\r
    id: "numberOrString",\r
    label: "Root Node",\r
    children: [\r
      {id: 1, label: "Child Node"},\r
      {id: "node2", label: "Second Child"}\r
    ]\r
  }\r
])\r
<\/script>
`})}),`
`,e.jsx(t.p,{children:"Or, import it into your application:"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-javascript",children:`import { TreeView } from "@grapoza/vue-tree"\r
Vue.use(TreeView)
`})}),`
`,e.jsx(t.p,{children:"Then add the component:"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-html",children:`<TreeView id="my-tree" v-model="dataModel" />
`})}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-javascript",children:`export default {\r
  data() {\r
    return {\r
      dataModel: [\r
        {\r
          id: "numberOrString",\r
          label: "Root Node",\r
          children: [\r
            {id: 1, label: "Child Node"},\r
            {id: "node2", label: "Second Child"}\r
          ]\r
        }\r
      ]\r
    }\r
  }\r
}
`})}),`
`,e.jsx(t.h2,{id:"demos",children:"Demos"}),`
`,e.jsxs(t.p,{children:["To see it in action, try out the ",e.jsx(t.a,{href:"/docs/examples-treeview--basic#examples",children:"demos"}),"."]}),`
`,e.jsx(t.h2,{id:"tree-props",children:"Tree Props"}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Prop"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Type"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Default value"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Required"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"modelValue"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Array"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The data model containing a tree structure of node data; used with ",e.jsx(t.code,{children:"v-model"})]}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"},children:"Yes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"customAriaKeyMap"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Object"}),e.jsx(t.td,{style:{textAlign:"left"},children:"An object, the properties of which are arrays to keyCodes for various actions"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["See ",e.jsx(t.a,{href:"#setting-key-bindings",children:"Aria"})]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"filterMethod"}),e.jsx(t.td,{style:{textAlign:"left"},children:"TreeViewFilterMethod"}),e.jsx(t.td,{style:{textAlign:"left"},children:"A boolean function against which nodes are evaluated to see if they should be included in the tree"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"null"})," (no filtering)"]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"loadNodesAsync"}),e.jsx(t.td,{style:{textAlign:"left"},children:"TreeViewLoadNodesAsyncMethod"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["A function that is called on mount to asynchronously load the root data model (use with a ",e.jsx(t.code,{children:"v-model"})," of ",e.jsx(t.code,{children:"[]"}),")"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"modelDefaults"}),e.jsx(t.td,{style:{textAlign:"left"},children:"TreeViewNodeMetaModelDefaultsMethod"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An function that returns the default metadata for a given data node from the ",e.jsx(t.code,{children:"modelValue"})," (see ",e.jsx(t.a,{href:"#model-data",children:"Model Data"}),")"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"() => {}"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"selectionMode"}),e.jsx(t.td,{style:{textAlign:"left"},children:"SelectionMode"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["How selection should operate (see ",e.jsx(t.a,{href:"#selection-mode",children:"Selection Mode"}),")"]}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"null"})," (cannot select nodes)"]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"skinClass"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["A class name to apply to the tree that specifies a skin to use (see ",e.jsx(t.a,{href:"#skins",children:"Skins"}),")"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:'"grtv-default-skin"'})}),e.jsx(t.td,{style:{textAlign:"left"}})]})]})]}),`
`,e.jsx(t.h2,{id:"selection-mode",children:"Selection Mode"}),`
`,e.jsxs(t.p,{children:["The ",e.jsx(t.code,{children:"selectionMode"})," property defines how nodes should be selected within the tree view. Only nodes with the ",e.jsx(t.code,{children:"selectable"})," model property set to ",e.jsx(t.code,{children:"true"})," can be selected. Allowed values follow the enum:"]}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-javascript",children:`export enum SelectionMode {\r
  None = "none",\r
  Single = "single",\r
  Multiple = "multiple",\r
  SelectionFollowsFocus = "selectionFollowsFocus",\r
};
`})}),`
`,e.jsxs(t.ul,{children:[`
`,e.jsxs(t.li,{children:["If ",e.jsx(t.code,{children:"null"})," (the default) then selection does not occur."]}),`
`,e.jsxs(t.li,{children:["If ",e.jsx(t.code,{children:"single"})," then one node is selected at a time when the user clicks the node or using the selection keyboard binding (",e.jsx(t.code,{children:"Enter"})," by default)."]}),`
`,e.jsxs(t.li,{children:["If ",e.jsx(t.code,{children:"selectionFollowsFocus"})," then selection follows the focusable node within the tree view."]}),`
`,e.jsxs(t.li,{children:["if ",e.jsx(t.code,{children:"multiple"})," then multiple nodes can be selected when the user clicks each node or using the selection keyboard binding on each node."]}),`
`]}),`
`,e.jsxs(t.p,{children:["When clicking on a node, it is only selected if the click target was not interactive (",e.jsx(t.em,{children:"e.g."}),", clicking a checkbox or expander won't select the node, but clicking a label will)."]}),`
`,e.jsx(t.h2,{id:"model-data",children:"Model Data"}),`
`,e.jsxs(t.p,{children:["Model data can be loaded either synchronously through the ",e.jsx(t.code,{children:"v-model"})," or asynchronously through the ",e.jsx(t.code,{children:"loadNodesAsync"})," property. If both are specified then the data from ",e.jsx(t.code,{children:"v-model"})," is overwritten when the ",e.jsx(t.code,{children:"loadNodesAsync"})," function returns data, so a ",e.jsx(t.code,{children:"v-model"})," of ",e.jsx(t.code,{children:"[]"})," is the appropriate value to use when loading the root nodes asynchronously."]}),`
`,e.jsxs(t.p,{children:["The data passed to the tree view's ",e.jsx(t.code,{children:"v-model"})," or returned from ",e.jsx(t.code,{children:"loadNodesAsync"})," should be an array of nodes, where each node should have:"]}),`
`,e.jsxs(t.ul,{children:[`
`,e.jsxs(t.li,{children:["Required: A property with a value that will be used as the node's ID (by default the node looks for a property named ",e.jsx(t.code,{children:"id"}),")"]}),`
`,e.jsxs(t.li,{children:["Required: A property with a value that will be used as the node's label (by default the node looks for a property named ",e.jsx(t.code,{children:"label"}),")"]}),`
`,e.jsxs(t.li,{children:["Optional: A property containing any subnodes (by default the node looks for a property named ",e.jsx(t.code,{children:"children"}),"); an empty array is required if the children will be loaded asynchronously"]}),`
`,e.jsx(t.li,{children:"Optional: Any other data you want on your node"}),`
`]}),`
`,e.jsxs(t.p,{children:["Meta data about a node in the tree is created when the node is initialized in the tree view, and can be customized using the ",e.jsx(t.code,{children:"modelDefaults"})," property. The ",e.jsx(t.code,{children:"modelDefaults"})," should be a method that takes the data for the node from the ",e.jsx(t.code,{children:"v-model"})," and returns an object specifying any default tree node state related to that node. That returned value will be merged with the defaults to create the node meta data used by the tree view."]}),`
`,e.jsxs(t.p,{children:["The meta data for the entire tree is exposed via a ",e.jsx(t.code,{children:"metaModel"}),", and can be manipulated to programmatically change the tree state if needed, ",e.jsx(t.em,{children:"e.g."}),", to set a checkbox's checked state or a node's selectable state."]}),`
`,e.jsxs(t.p,{children:["Some example node data, as passed to ",e.jsx(t.code,{children:"v-model"}),":"]}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-javascript",children:`[{\r
  id: "node0",\r
  label: "A checkbox node",\r
  children: [],\r
},\r
{\r
  otherIdProp: "node1",\r
  textProp: "A radio button node",\r
  subThings: [],\r
  extraIrrelevantData: "February",\r
}]
`})}),`
`,e.jsx(t.p,{children:"And a function to use for `modelDefaults for those nodes:"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-javascript",children:`function modelDefaults(node) {\r
  const baseDefaults = {\r
    expandable: true,\r
    selectable: false,\r
    state: {\r
      expanded: true,\r
      selected: false,\r
    }\r
  };\r
\r
  switch (node.id) {\r
    case 'node0':\r
      return Object.assign(baseDefaults, {\r
        title: "This will be the value of the node text/label's 'title' attribute.",\r
        focusable: true,\r
        input: {\r
          type: 'checkbox'\r
        },\r
        state: {\r
          input: {\r
            value: false,\r
            disabled: false\r
          }\r
        }\r
      });\r
    case 'node1':\r
     return Object.assign(baseDefaults {\r
      idProperty: "otherIdProp", // Customize what model props are checked for the id, label, and children\r
      labelProperty: "textProp",\r
      childrenProperty: "subThings",\r
      input: {\r
        type: 'radio',\r
        name: 'rbGroup1',   // Used as the name attribute for the radio button\r
        value: 'thisValue', // Used as the value attribute for the radio button\r
        isInitialRadioGroupValue: true // Indicates this should be the initially selected value for the group\r
      },\r
      state: {\r
        // No input.value here; to let complex radio button groupings work, state value is\r
        // bound to an internal tree-level property. input.disabled, however, is valid here for radio buttons.\r
      },\r
      addChildCallback: () => Promise.resolve({ id: '1', label: 'label' })\r
     });\r
    default:\r
      return baseDefaults;\r
  }\r
}
`})}),`
`,e.jsxs(t.p,{children:["The properties below can be specified for each node. Note that ",e.jsx(t.code,{children:"id"}),", ",e.jsx(t.code,{children:"label"}),", and ",e.jsx(t.code,{children:"children"})," are the default properties nodes look for to get data, but the names of the properties can be overridden using the ",e.jsx(t.code,{children:"modelDefaults"}),"."]}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Prop"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Type"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Default value"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Required"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"id"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Number/String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"An ID that uniquely identifies this node within the tree"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Yes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"label"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The text to show in the tree view"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Yes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"children"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Array<Object/>"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The child nodes of this node"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"[]"})}),e.jsx(t.td,{style:{textAlign:"left"}})]})]})]}),`
`,e.jsx(t.h2,{id:"default-data",children:"Default Data"}),`
`,e.jsxs(t.p,{children:["The ",e.jsx(t.code,{children:"modelDefaults"})," property's return value contains any data about the node's capabilities and its initial state. This keeps the tree-specific data separate from the data of the model itself. This makes it more convenient to drop data into the tree view as-is, potentially with a ",e.jsx(t.code,{children:"modelDefaults"})," specified on the tree view to define common values used in every node. The following table lists the properties that can be part of the value returned from ",e.jsx(t.code,{children:"modelDefaults"}),"."]}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Prop"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Type"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Default value"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Required"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"idProperty"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The name of the property with a value that will be used as the node's ID"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"id"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"labelProperty"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The name of the property with a value that will be used as the node's label"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"label"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"childrenProperty"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The name of the property with a value that will be used as the node's subnodes"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"children"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"title"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The text of the node's text or label's title attribute"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"expandable"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True to show a toggle for expanding nodes' subnode lists"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"true"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"selectable"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True to allow the node to be selected"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"deletable"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True to allow the node to be deleted"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"focusable"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True to make the node the focus when the tree view is focused"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["See ",e.jsx(t.a,{href:"#focusable",children:"Aria"})," for details"]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"draggable"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True to make this node draggable"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"allowDrop"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True to allow dropping TreeViewNode data onto this node"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"dataTransferEffectAllowed"}),e.jsx(t.td,{style:{textAlign:"left"},children:"EffectAllowed"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["One of the allowed ",e.jsx(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed",rel:"nofollow",children:"effectAllowed"})," values (",e.jsx(t.code,{children:"copy"}),", ",e.jsx(t.code,{children:"move"}),", ",e.jsx(t.code,{children:"copyMove"}),", or ",e.jsx(t.code,{children:"none"})," are honored)"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"copyMove"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"expanderTitle"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The text to use as the title for the expander button"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"addChildTitle"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The text to use as the title for the Add Child button"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"deleteTitle"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"The text to use as the title for the Delete button"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"input"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Object"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["Contains data specific to the node's ",e.jsx(t.code,{children:"input"})," element"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"input.type"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The type of input; valid values are ",e.jsx(t.code,{children:"checkbox"})," or ",e.jsx(t.code,{children:"radio"})]}),e.jsx(t.td,{style:{textAlign:"left"},children:"-"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Yes*"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"input.name"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The name attribute of the input; used with ",e.jsx(t.code,{children:"radio"})," type"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"'unspecifiedRadioName'"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"input.value"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The value attribute of the input; used with ",e.jsx(t.code,{children:"radio"})," type"]}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"label"}),"'s value**"]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"input.isInitialRadioGroupValue"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Indicates this should be the initially selected value for the group"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"state"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Object"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Contains the current state of the node"}),e.jsx(t.td,{style:{textAlign:"left"},children:"-"}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"state.expanded"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True if this node's subnode list is expanded"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"state.selected"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True if the node is selected"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"state.input"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Object"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Contains any state related to the input field"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"{}"})," for checkbox, otherwise -"]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"state.input.value"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Contains the value of the input"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"false"})," for checkbox, otherwise -"]}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"state.input.disabled"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Boolean"}),e.jsx(t.td,{style:{textAlign:"left"},children:"True if the node's input field is disabled"}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"false"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"customizations"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Object"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["A ",e.jsx(t.a,{href:"#customizing-the-tree-view",children:"customizations"})," object"]}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"{}"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"addChildCallback"}),e.jsx(t.td,{style:{textAlign:"left"},children:"TreeViewAddChildCallbackMethod"}),e.jsx(t.td,{style:{textAlign:"left"},children:"An async function that resolves to a new node model (called by the add button). The function can take one argument, the model of the parent node. It should return the model of the new child node."}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"loadChildrenAsync"}),e.jsx(t.td,{style:{textAlign:"left"},children:"TreeViewLoadChildNodesAsyncMethod"}),e.jsx(t.td,{style:{textAlign:"left"},children:"An async function that resolves to a node's children (called when the parent is expanded). The function can take one argument, the model of the parent node. It should return the models of the children nodes."}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"deleteNodeCallback"}),e.jsx(t.td,{style:{textAlign:"left"},children:"TreeViewDeleteNodeCallbackMethod"}),e.jsx(t.td,{style:{textAlign:"left"},children:"An async function that resolves to a boolean (called by the delete button). The function can take one argument, the model to delete. It should return a boolean indicating whether to delete the node."}),e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"null"})}),e.jsx(t.td,{style:{textAlign:"left"}})]})]})]}),`
`,e.jsxs(t.p,{children:["* If ",e.jsx(t.code,{children:"input.type"})," is not supplied, ",e.jsx(t.code,{children:"input"})," is forced to ",e.jsx(t.code,{children:"null"}),"."]}),`
`,e.jsxs(t.p,{children:["** If ",e.jsx(t.code,{children:"input.value"})," is not supplied, it defaults to the node's label value replaced with the regular expression ",e.jsx(t.code,{children:`/[\\s&<>"'\\/]/g, ''`})]}),`
`,e.jsx(t.h2,{id:"public-methods-and-values",children:"Public Methods and Values"}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Method"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Parameters"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Returns"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"getCheckedCheckboxes"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Gets models for checked checkbox nodes"}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An ",e.jsx(t.code,{children:"Array<Object>"})," of models for checked checkbox nodes"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"getCheckedRadioButtons"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Gets models for checked radio nodes"}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An ",e.jsx(t.code,{children:"Array<Object>"})," of models for checked radio button nodes"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"getSelected"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Gets models for selected nodes"}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An ",e.jsx(t.code,{children:"Array<Object>"})," of models for selected nodes"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"getMatching"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Gets models for nodes that match a function"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"matcherFunction"}),": A function that takes a node model and returns a boolean indicating whether that node should be returned. ",e.jsx("br",{})," ",e.jsx(t.code,{children:"maxMatches"})," The maximum number of matches to return."]}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An ",e.jsx(t.code,{children:"Array<Object>"})," of models for matched nodes"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"metaModel"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An object containing the meta data for the tree nodes. Its structure mirrors the ",e.jsx(t.code,{children:"v-model"})," data."]}),e.jsx(t.td,{style:{textAlign:"left"},children:"N/A"}),e.jsx(t.td,{style:{textAlign:"left"},children:"N/A"})]})]})]}),`
`,e.jsx(t.h2,{id:"events",children:"Events"}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Event"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Handler Parameters"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeAdd"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is added"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target (child) node ",e.jsx("br",{})," ",e.jsx(t.code,{children:"parent"})," The model of the parent node"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeClick"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is clicked"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node ",e.jsx("br",{})," ",e.jsx(t.code,{children:"event"})," The original event"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeDblclick"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is double clicked"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node ",e.jsx("br",{})," ",e.jsx(t.code,{children:"event"})," The original event"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeDelete"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is deleted"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeCheckboxChange"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node's checkbox emits a change event"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node ",e.jsx("br",{})," ",e.jsx(t.code,{children:"event"})," The original event"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeChildCheckboxChange"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a child node's checkbox emits a change event"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node (the parent of the changed node) ",e.jsx("br",{})," ",e.jsx(t.code,{children:"child"})," The model of changed node ",e.jsx("br",{})," ",e.jsx(t.code,{children:"event"})," The original event"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeRadioChange"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node's radio button emits a change event"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node ",e.jsx("br",{})," ",e.jsx(t.code,{children:"event"})," The original event"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeExpandedChange"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is expanded or collapsed"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeSelectedChange"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is selected or deselected"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeActivate"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node is focused and the activation key is pressed"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeNodeChildrenLoad"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when a node's children are done loading asynchronously"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"target"})," The meta model of the target node"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"treeRootNodesLoad"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Emitted when the root nodes are done loading asynchronously"}),e.jsx(t.td,{style:{textAlign:"left"}})]})]})]}),`
`,e.jsx(t.h2,{id:"css-classes",children:"CSS Classes"}),`
`,e.jsx(t.p,{children:"The display of the tree view can be customized via CSS using the following classes. Class names are organized in a hierarchy, so a containing node's class is the prefix of its child classes."}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Class"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Affects"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtv"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The top-level tree view list"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtv-wrapper"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The wrapper div around the list of root nodes and the loading placeholder"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtv-loading"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The placeholder shown when root nodes are loading asynchronously"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"A single node's list item"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-selected"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"A selected node"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The div containing the current node's UI"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-expander"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The button used to expand the children"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-expanded"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"Applied to the expander button when the node is expanded"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-expanded-indicator"})}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The ",e.jsx(t.code,{children:"<i>"})," element containing the expansion indicator"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-spacer"})}),e.jsxs(t.td,{style:{textAlign:"left"},children:["An empty spacer to replace fixed-width elements, ",e.jsx(t.em,{children:"e.g."})," the expander or checkbox"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-label"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The label for the checkbox of checkable nodes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-input"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"Any type of input field within the tree node"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-checkbox"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The checkbox"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-radio"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The radio button"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-text"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The text for a non-input node"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-action"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The action buttons (e.g., add child or delete)"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-add-child-icon"})}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The ",e.jsx(t.code,{children:"<i>"})," element containing the add child icon"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-delete-icon"})}),e.jsxs(t.td,{style:{textAlign:"left"},children:["The ",e.jsx(t.code,{children:"<i>"})," element containing the delete icon"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-drop-target"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"A node has another node dragged over it and can accept drops"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-child-drop-target"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"A node has another node dragged over its child drop target"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-sibling-drop-target"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"Either the previous or next sibling node drop target"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-sibling-drop-target-hover"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"A node has another node dragged over one of the sibling drop targets"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-prev-target"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The previous sibling node drop target"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-self-next-target"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The next sibling node drop target"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-children-wrapper"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The wrapper div around the list of child nodes and the loading placeholder"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-children"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The list of child nodes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-loading"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The placeholder shown when child nodes are loading asynchronously"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:e.jsx(t.code,{children:"grtvn-dragging"})}),e.jsx(t.td,{style:{textAlign:"left"},children:"The node is dragged as part of a drag and drop operation"})]})]})]}),`
`,e.jsx(t.h2,{id:"customizing-the-tree-view",children:"Customizing the Tree View"}),`
`,e.jsx(t.h3,{id:"customizations-property",children:"Customizations Property"}),`
`,e.jsxs(t.p,{children:["It's often helpful to be able to make adjustments to the markup or styles for the tree. You can provide an object from the ",e.jsx(t.code,{children:"modelDefaults"})," using the ",e.jsx(t.code,{children:"customizations"})," property to set a customization affecting all or some nodes."]}),`
`,e.jsx(t.p,{children:"A customizations object may have the following properties:"}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Prop"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Type"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Object"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Properties are classes to add for various parts of a node"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNode"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to a node's list item"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelf"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the div containing the current node's UI"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfSelected"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["Classes to add to the ",e.jsx(t.code,{children:"grtvn-self"})," div if the node is selected"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfExpander"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the button used to expand the children"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfExpanded"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the expander button when the node is expanded"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfExpandedIndicator"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["Classes to add to the ",e.jsx(t.code,{children:"<i>"})," element containing the expansion indicator"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfSpacer"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the fixed-width spacer"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfLabel"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the label for the checkbox of checkable nodes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfInput"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to an input field"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfCheckbox"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the checkbox"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfRadio"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the radio button"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfText"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the text for a non-input node"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfAction"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the action buttons"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfAddChild"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the add child buttons"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfAddChildIcon"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["Classes to add to the ",e.jsx(t.code,{children:"<i>"})," element containing the add child icon"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfDelete"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the delete button"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeSelfDeleteIcon"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["Classes to add to the ",e.jsx(t.code,{children:"<i>"})," element containing the delete icon"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeChildrenWrapper"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the wrapper div around the list of child nodes and the loading placeholder"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeChildren"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the list of child nodes"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"classes.treeViewNodeLoading"}),e.jsx(t.td,{style:{textAlign:"left"},children:"String"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Classes to add to the node children loading placeholder"})]})]})]}),`
`,e.jsx(t.h3,{id:"skins",children:"Skins"}),`
`,e.jsxs(t.p,{children:["If adding classes isn't enough, the entire default styles of the TreeView can be overridden using the ",e.jsx(t.code,{children:"skinClass"})," property of the TreeView. When this property is set, the TreeView's default class of ",e.jsx(t.code,{children:"grtv-default-skin"})," is replaced with your own class name, causing all of the built-in style selectors to not match the tree. Instead, you can create your own stylesheet or modify a copy of the default styles to achieve complete control over the tree styling."]}),`
`,e.jsx(t.h3,{id:"slots",children:"Slots"}),`
`,e.jsxs(t.p,{children:["Sometimes the entire content of a node (",e.jsx(t.em,{children:"e.g."}),", the checkbox or text) needs customization beyond what is available through classes. In this case, some slots are available in the TreeView to allow this customization."]}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Slot Name"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Props"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"loading-root"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Replaces the span used when loading children asynchronously"}),e.jsx(t.td,{style:{textAlign:"left"}})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"text"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Replaces the span used for non-input content"}),e.jsx(t.td,{style:{textAlign:"left"},children:"metaModel - The TreeViewNode's metaModel"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["customClasses - Any custom classes specified in ",e.jsx(t.code,{children:"treeNodeSpec.customizations"})]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"checkbox"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Replaces the label and content used for checkboxes"}),e.jsx(t.td,{style:{textAlign:"left"},children:"metaModel - The TreeViewNode's metaModel"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["customClasses - Any custom classes specified in ",e.jsx(t.code,{children:"treeNodeSpec.customizations"})]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"},children:"inputId - The ID for the input (as generated by the TreeViewNode)"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["checkboxChangeHandler - The handler for checkbox change events. You should fire this on ",e.jsx(t.code,{children:"change"}),"."]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"radio"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Replaces the label and content used for radio buttons"}),e.jsx(t.td,{style:{textAlign:"left"},children:"metaModel - The TreeViewNode's metaModel"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["customClasses - Any custom classes specified in ",e.jsx(t.code,{children:"treeNodeSpec.customizations"})]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"},children:"inputId - The ID for the input (as generated by the TreeViewNode)"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["radioChangeHandler - The handler for radio button change events. You should fire this on ",e.jsx(t.code,{children:"change"}),"."]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"loading"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Replaces the span used when loading children asynchronously"}),e.jsx(t.td,{style:{textAlign:"left"},children:"metaModel - The TreeViewNode's metaModel"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["customClasses - Any custom classes specified in ",e.jsx(t.code,{children:"treeNodeSpec.customizations"})]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"expander"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Replaces the button and spacer used for expanding nodes"}),e.jsx(t.td,{style:{textAlign:"left"},children:"metaModel - The TreeViewNode's metaModel"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsxs(t.td,{style:{textAlign:"left"},children:["customClasses - Any custom classes specified in ",e.jsx(t.code,{children:"treeNodeSpec.customizations"})]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"},children:"expanderId - The ID for the expander button as generated by the TreeViewNode)"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"},children:"canExpand - The TreeViewNode's computed boolean indicating whether the node can expand"})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"}}),e.jsx(t.td,{style:{textAlign:"left"},children:"toggleNodeExpanded - A method to toggle the expanded state of the node"})]})]})]}),`
`,e.jsx(t.p,{children:"Example usage:"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-html",children:`<TreeView id="customtree" v-model="model">\r
  <template #text="{ metaModel, customClasses }">\r
    <!-- The TreeViewNode's metaModel is available, and built-in classes and overrides are available -->\r
    <em :title="metaModel.title"\r
              class="grtvn-self-text"\r
              :class="customClasses.treeViewNodeSelfText">\r
          {{ metaModel.data[metaModel.labelProperty] }}\r
    </em>\r
  </template>\r
\r
  <template #checkbox="{ metaModel, customClasses, inputId, checkboxChangeHandler }">\r
    <label :for="inputId"\r
        :title="metaModel.title"\r
        class="grtvn-self-label"\r
        :class="customClasses.treeViewNodeSelfLabel">\r
\r
      <!-- The generated inputId for the node is available -->\r
      <input :id="inputId"\r
             class="my-awesome-checkbox-class"\r
             type="checkbox"\r
             :disabled="metaModel.state.input.disabled"\r
             v-model="metaModel.state.input.value"\r
             @change="checkboxChangeHandler" /> <!-- The TreeViewNode change handler is available -->\r
\r
      <em>{{ "Slotted Content for " + metaModel.data[metaModel.labelProperty] }}</em>\r
    </label>\r
  </template>\r
</TreeView>
`})}),`
`,e.jsx(t.h2,{id:"asynchronous-loading",children:"Asynchronous Loading"}),`
`,e.jsxs(t.p,{children:["Child nodes can be loaded asynchronously by providing a method to the ",e.jsx(t.code,{children:"loadChildrenAsync"})," property of the model returned by ",e.jsx(t.code,{children:"modelDefaults"}),". The method will be called when the node is expanded, and the property containing the node's children will be ",e.jsx(t.em,{children:"overwritten"})," with the results of the async call. For example, the following could be used as ",e.jsx(t.code,{children:"modelDefaults"})," that would have every node load children when it was expanded."]}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-javascript",children:`() => {{\r
  expandable: true,\r
  loadChildrenAsync: (m) => axios.get(\`/children/\${m.id}\`)\r
})
`})}),`
`,e.jsx(t.p,{children:"The method may accept one argument, which will be the meta data of the node that has been expanded. It should resolve to an array of child node models."}),`
`,e.jsx(t.p,{children:"The load method is called once, and after that the children are part of the model and are not reloaded."}),`
`,e.jsx(t.h2,{id:"drag-and-drop",children:"Drag and Drop"}),`
`,e.jsxs(t.p,{children:["A user can drag and drop an individual TreeViewNode. A drag only affects the node where the dragging starts, and has nothing to do with any node selection within the tree. To make a node draggable, the node's ",e.jsx(t.code,{children:"draggable"})," must be ",e.jsx(t.code,{children:"true"})," in its meta data. To make a node accept drops, the ",e.jsx(t.code,{children:"allowDrop"})," property must be ",e.jsx(t.code,{children:"true"})," in the node's meta data. Both Move and Copy operations are supported. To copy in most browsers hold down the ",e.jsx(t.code,{children:"Ctrl"})," key while dragging."]}),`
`,e.jsx(t.p,{children:"When dropping a node on another node, there are three areas of the target node where a drop can occur. If dropped at the top of the target node in the shaded area then the node will be inserted before the target. If dropped at the bottom of the target node in the shaded area then the node will be inserted after the target. If dropped directly on the of the target node then the node will be inserted as a child of the target. The drop can occur on a node in the same tree or in a different tree as long as the receiving node allows drops."}),`
`,e.jsxs(t.p,{children:["The drop can also occur anywhere that allows dropping data with the ",e.jsx(t.code,{children:"application/json"})," or ",e.jsx(t.code,{children:"text/plain"})," MIME types (",e.jsx(t.em,{children:"e.g."}),", a simple text input field or a text editor)."]}),`
`,e.jsx(t.p,{children:"When copying a node the newly created node will have its own unique identifier, will not be the currently focusable node even if the source node was the focusable node."}),`
`,e.jsxs(t.p,{children:["When moving a node within the same tree, the actual node is moved within the tree data. If the node is copied within the same tree, any function members of the node data (",e.jsx(t.em,{children:"e.g."}),", the addChildCallback) are copied."]}),`
`,e.jsx(t.p,{children:"When a node is moved or copied to a different tree, the node data that passes between trees does not contain any of the functions from the original node data."}),`
`,e.jsx(t.h2,{id:"aria",children:"Aria"}),`
`,e.jsx(t.p,{children:"ARIA Accessibility recommendations have been implemented at a basic level. This means keyboard navigation follows ARIA recommendations, but the component has not been tested with a screen reader and, since many screen readers exhibit different behaviors for tree view controls anyway, it would be expected to fail articulation checks in many cases. Additionally, some recommended keyboard controls are not implemented (e.g., Expand All Nodes, Type-ahead Focusing). When using the component, there are only a couple of things you need to know."}),`
`,e.jsx(t.h3,{id:"setting-key-bindings",children:"Setting Key Bindings"}),`
`,e.jsxs(t.p,{children:["The keys used to navigate the tree view can be customized using the ",e.jsx(t.code,{children:"customAriaKeyMap"})," prop of the TreeView component. The value of the prop is an object, with each attribute named for a type of action and its value as an Array of integer key codes that trigger that action."]}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{style:{textAlign:"left"},children:"Attribute"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Description"}),e.jsx(t.th,{style:{textAlign:"left"},children:"Default value"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"activateItem"}),e.jsxs(t.td,{style:{textAlign:"left"},children:["Triggers the default action for input nodes (generally ",e.jsx(t.code,{children:"click"}),")"]}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[32]"})," (Space)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"selectItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Selects the currently focused item"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[13]"})," (Enter)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"focusLastItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Sets focus to the last visible item in the tree"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[35]"})," (End)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"focusFirstItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Sets focus to the first visible item in the tree"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[36]"})," (Home)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"collapseFocusedItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Collapses the currently focused item, if expanded; otherwise focuses the parent node if one exists"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[37]"})," (Left)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"expandFocusedItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Expands the currently focused item, if collapsed; otherwise focuses the first child node if one exists"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[39]"})," (Right)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"focusPreviousItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Focuses the previous visible node* in the tree if one exists."}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[38]"})," (Up)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"focusNextItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Focuses the next visible node** in the tree if one exists."}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[40]"})," (Down)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"insertItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Fires the callback to add a new node if the callback exists"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[45]"})," (Insert)"]})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{style:{textAlign:"left"},children:"deleteItem"}),e.jsx(t.td,{style:{textAlign:"left"},children:"Deletes the current node, if deletable"}),e.jsxs(t.td,{style:{textAlign:"left"},children:[e.jsx(t.code,{children:"[46]"})," (Delete)"]})]})]})]}),`
`,e.jsx(t.p,{children:"* The previous visible node is a)the focused node's previous sibling's last child if visible, b)the previous sibling if it has no children or is collapsed, or c)the parent node."}),`
`,e.jsx(t.p,{children:"** The next visible node is a)the focused node's first child if one exists and the focused node is expanded, b)the focused node's next sibling if one exists, or c)the focused node's parent's next sibling if one exists."}),`
`,e.jsx(t.h3,{id:"focusable",children:"Focusable"}),`
`,e.jsxs(t.p,{children:["The tree view uses a roving tab index to maintain focusability in the tree. A node's meta model can specify a ",e.jsx(t.code,{children:"focusable"})," property of ",e.jsx(t.code,{children:"true"})," in order for that node to be used as the initial target of keyboard focus within the tree view. If multiple nodes specify this then only the first will have ",e.jsx(t.code,{children:"focusable"})," set to ",e.jsx(t.code,{children:"true"})," once the tree view is intialized. If no models have it specified then the first selected node in the tree view is given a ",e.jsx(t.code,{children:"focusable"})," of ",e.jsx(t.code,{children:"true"}),". If there are no selected nodes then the first node in the tree view is given a ",e.jsx(t.code,{children:"focusable"})," of ",e.jsx(t.code,{children:"true"}),"."]}),`
`,e.jsx(t.h3,{id:"more-about-aria-tree-views",children:"More about ARIA Tree Views"}),`
`,e.jsx(t.p,{children:e.jsx(t.a,{href:"https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView",rel:"nofollow",children:"WAI-ARIA Authoring Best Practices, Tree View"})}),`
`,e.jsx(t.h2,{id:"filtering",children:"Filtering"}),`
`,e.jsxs(t.p,{children:["If a ",e.jsx(t.code,{children:"filterMethod"})," property is provided to the treeView then each node will get evaulated against that method, any node for which the function returns ",e.jsx(t.code,{children:"true"})," or for which a subnode returns ",e.jsx(t.code,{children:"true"}),' will show in the tree view and get included in things like keyboard navigation or focusing. The method takes one parameter, which is the node. For example, to only show nodes with a description including "steve" you could use the method:']}),`
`,e.jsx(t.p,{children:e.jsx(t.code,{children:"(node) => node.label.toLowerCase().includes('steve')"})})]})}function j(l={}){const{wrapper:t}={...s(),...l.components};return t?e.jsx(t,{...l,children:e.jsx(n,{...l})}):n(l)}export{j as default};
